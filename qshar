#!/bin/sh

#########################################################################
# Program do archiwizacji plikow, generujacy skrypt wypakowujacy.       #
#                                                                       #
# Sposob uzycia:                                                        #
#     qshar <nazwa archiwum> <lista plikow/folderow>                    #
#                                                                       #
# Uzywane w skrypcie programy:                                          #
#     if, while, for                                                    #
#     printf, shift                                                     #
#     ls                                                                #
#     awk                                                               #
#     cut                                                               #
#     eval (uruchamianie komendy ze zmiennej)                           #
#     stat (atrybuty i rozmiar pliku)                                   #
#     md5sum (suma kontrolna dla kazdego pliku)                         #
#     hexdump / od (zrzut bajtow na system osemkowy)                    #
#                                                                       #
# Wersja: 1.6                                                           #
# Autor: quetzelcoatlus, AD 2018                                        #
#########################################################################


# skrypt przyjmuje co najmniej 2 parametry
if [ ${#@} -lt 2 ]
then
    printf "Skrypt musi otrzymac co najmniej dwa parametry: nazwe archiwum oraz nazwe pliku. Konczenie pracy.\n"
    exit 1
fi

# skrypt wypakowujacy bedzie mial nazwe z $1 + ".sh"
file="$1.sh"

# pliki beda wypakowywane do folderu z $1
dir="$1"

# przesuwamy argumenty
shift

# ustawienie programu do zrzutu plikow w postac osemkowa. Domyslnie najpierw od, potem hexdump.
if (printf "a" | hexdump --no-squeezing --format '1/1 "%o\n"'> /dev/null 2>/dev/null)
then
    octdump="hexdump -v -e '1/1 \"%o\n\"'"
elif (printf "a" | od --address-radix=n --output-duplicates --format=o1 --width=1 > /dev/null 2>/dev/null)
then    
    octdump="od -An -v -to1 -w1"
else
    printf "Brak jakiegokolwiek programu do konwersji bajtow na system osemkowy: 'hexdump' lub 'od'. Konczenie pracy skryptu.\n"
    exit 2
fi


# wypisanie $1 haszy, a potem enter. Do rysowania boxa. :3
n_hashes () {
    i=1
    while [ $i -le $1 ]
    do
        printf "#" >> $2
        i=$((i+1))
    done
    printf "\n" >> $2
}

# wypisanie $1 spacji, a potem #\n. Potrzebne do generowania naglowka pliku wynikowego.
hash_after_spaces () {
    i=1
    while [ $i -le $1 ]
    do
        printf " " >> $2
        i=$((i+1))
    done
    printf "#\n" >> $2
}

# wypisywanie statystyk pliku. Funkcja umozliwia rekurencje w przypadku pliku w folderze
get_stats () {
    if [ -d $1 ] 
    then
        for f in $(ls $1)
        do
            get_stats "$1/$f" $2
        done
    elif [ -f $1 ] 
    then
        name=$1
        # jesli nazwa pliku jest za duza dla ramki, to obcinamy :)
        if [ ${#name} -ge 39 ]
        then
            name=$(printf $name | cut -c -35)
            name="$name""..."
        fi
        printf "# %10d B | $(stat -c %A $1) | $name" $(stat -c %s $1) >> $2
        hash_after_spaces $((39-${#name})) $2
    fi
}

printf "#!/bin/sh\n\n" > $file

n_hashes 70 $file

printf "# Jest to skrypt wypakowujacy nastepujace pliki:" >> $file
hash_after_spaces 21 $file

printf "#" >> $file
hash_after_spaces 68 $file

printf "#      Rozmiar |  Atrybuty  | Nazwa" >> $file
hash_after_spaces 34 $file

for var in "$@" 
do
    get_stats $var $file
done

printf "#" >> $file
hash_after_spaces 68 $file

printf '# Uruchomic mozna go poprzez:' >> $file
hash_after_spaces 40 $file

printf '#     $ sh/bash <skrypt>' >> $file
hash_after_spaces 45 $file

printf '#     $ chmod +x <skrypt> ; ./<skrypt>' >> $file
hash_after_spaces 31 $file

printf "#" >> $file
hash_after_spaces 68 $file

printf "# Uzywane w skrypcie programy:" >> $file
hash_after_spaces 39 $file

printf "#     printf" >> $file
hash_after_spaces 57 $file

printf '#     if [ ... ] ; then ... ; (else ... ; ) fi' >> $file
hash_after_spaces 23 $file

printf '#     while [ ... ] ; do ... ; done' >> $file
hash_after_spaces 34 $file

printf '#     mkdir (-p)' >> $file
hash_after_spaces 53 $file

printf '#     chmod' >> $file
hash_after_spaces 58 $file

printf '#     md5sum (gdy jest)' >> $file
hash_after_spaces 46 $file

printf "#" >> $file
hash_after_spaces 68 $file

printf "# Wersja programu archiwizujacego qshar: 1.6" >> $file
hash_after_spaces 25 $file

printf "# Autor programu archiwizujacego: quetzelcoatlus, AD 2018" >> $file
hash_after_spaces 12 $file

n_hashes 70 $file


printf '\n# Folder, do ktorego wypakowane zostanie archiwum.\n' >> $file
printf "dir=\"$dir\"\n\n" >> $file

printf '# Test na obecnosc programu md5sum uzywanego do zweryfikowania poprawnosci pliku (opcjonalne).\n' >> $file
printf 'if (printf "a" | md5sum -b > /dev/null 2>/dev/null)\n' >> $file
printf 'then\n' >> $file
printf '\tmd5="md5sum -b"\n' >> $file
printf 'else\n' >> $file
printf '\tmd5=""\n' >> $file
printf 'fi\n\n' >> $file


printf '# Sprawdzenie, czy istnieje juz katalog o takiej nazwie. Jesli tak, to dopisujemy do jego nazwy liczbe naturalna po myslniku. Do skutku.\n' >> $file
printf 'if [ -d "$dir" ]\n' >> $file
printf 'then\n' >> $file
printf '\ti=1\n' >> $file
printf '\twhile [ -d "$dir-$i" ]\n' >> $file
printf '\tdo\n' >> $file
printf '\t\ti=$((i+1))\n' >> $file
printf '\tdone\n' >> $file
printf '\tdir="$dir-$i"\n' >> $file
printf 'fi\n\n' >> $file

printf '# Tworzenie katalogu, a nastepnie sprawdzenie, czy sie dobrze utworzyl.\n' >> $file
printf 'printf "Tworzenie katalogu $dir -> "\n' >> $file
printf 'mkdir "$dir"\n\n' >> $file

printf 'if [ -d "$dir" ]\n' >> $file
printf 'then\n' >> $file
printf '\tprintf "OK\\n"\n' >> $file
printf 'else\n' >> $file
printf '\tprintf "(!)ERROR(!)\\n"\n' >> $file
printf '\texit 1\n' >> $file
printf 'fi\n' >> $file


archive () {
    #sprawdzenie, czy plik jest folderem. Jesli tak, to rekurencyjnie archiwizujemy jego pliki.
    if [ -d $1 ] 
    then
        for f in $(ls $1)
        do
            archive "$1/$f" $2
        done
    elif [ -f $1 ]  
    then
        >&2 printf "Archiwizacja pliku $1...\n"
        printf "\n############################################# $1 #############################################\n\n" >> $2

        printf "# Wyluskanie 'sciezki katalogu pliku' z 'sciezki pliku'.\n" >> $2 
        printf "getdir=\"${1%/*}\"\n" >> $2
        printf 'if [ "$getdir" = "'"$1"'" ]\n' >> $2
        printf 'then\n' >> $2
        printf '\tgetdir="."\n' >> $2
        printf 'fi\n\n' >> $2

        printf "# Katalog nowego pliku = 'katalog do ktorego wypakowujemy plik'+'/'+'stary katalog pliku'.\n" >> $2
        printf 'filedir="$dir/$getdir"\n\n' >> $2

        printf "# Jezeli go nie ma, to nalezy go utworzyc.\n" >> $2
        printf 'if [ ! -d "$filedir" ]\n' >> $2 
        printf 'then\n' >> $2
        printf '\tprintf "\\nTworzenie katalogu $filedir -> "\n' >> $2
        printf '\tmkdir -p "$filedir"\n' >> $2
        printf '\tif [ -d "$filedir" ]\n' >> $2
        printf '\tthen\n' >> $2
        printf '\t\tprintf "OK\\n"\n' >> $2
        printf '\telse\n' >> $2
        printf '\t\tprintf "(!)ERROR(!)\\n"\n' >> $2
        printf '\tfi\n' >> $2
        printf 'fi\n\n' >> $2

        printf 'printf "Wypakowywanie pliku $dir/'"$1 -> \"\n\n" >> $2

        printf "# Jedna dluga linijka wkladajaca do wyjsciowego pliku bajty oryginalnego pliku zapisane osemkowo.\n" >> $2
        printf 'printf "' >> $2
        eval $octdump $1 | awk '{printf "\\%s", $1}' >> $2
        printf '" > $dir/'"$1\n\n" >> $2

        printf '# Sprawdzenie, czy plik sie utworzyl.\n' >> $2
        printf 'if [ ! -f "$dir/'"$1\" ]\n" >> $2
        printf "then\n" >> $2
        printf '\tprintf "(!)ERROR(!). Nastepuje kontynuacja.\\n"\n' >> $2
        printf 'else\n' >> $2
        printf '\tprintf "OK, MD5 CHECK -> "\n' >> $2

        printf '\t# Przyznanie plikowi wlasciwych atrybutow\n' >> $2
        printf "\tchmod $(stat -c %a $1) "'"$dir/'"$1\"\n" >> $2

        printf '\t# Sprawdzenie zgodnosci sumy kontrolnej (jezeli jest) zawartosci utworzonego pliku z oryginalna.\n' >> $2
        printf '\tif [ ! -z "$md5" ]\n' >> $2
        printf '\tthen\n' >> $2
        printf '\t\tif [ "$($md5 $dir/'"$1"" | awk '{ printf "'$1'" }'"')" = "'"$(md5sum -b $1 | awk '{printf $1}')\" ]\n" >> $2
        printf '\t\tthen\n' >> $2 
        printf '\t\t\tprintf "OK\\n"\n' >> $2 
        printf '\t\telse\n' >> $2 
        printf '\t\t\tprintf "(!)WRONG(!)\\n"\n' >> $2 
        printf '\t\tfi\n' >> $2 
        printf '\telse\n' >> $2
        printf '\t\tprintf "(?)MISSING(?)\\n"\n' >> $2
        printf '\tfi\n' >> $2
        printf 'fi\n' >> $2 
    else
        >&2 printf "Plik $1 nie istnieje. Nastepuje kontynuacja...\n"
    fi
}

#iterujac po argumentach skryptu uruchamiamy funkcje archive
for var in "$@" 
do
    archive $var $file
done

printf '\nprintf "\\nWypakowywanie zakonczone. :)\\n"\n\n' >> $file
printf 'exit 0\n' >> $file

>&2 printf "\nArchiwum samowypakowujace $file zostalo wygenerowane. :)\n"

exit 0